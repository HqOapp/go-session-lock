// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/promoboxx/go-session-lock/src/lock (interfaces: Database,Task,Scanner)

// Package lockmock is a generated GoMock package.
package lockmock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	glitch "github.com/promoboxx/go-glitch/glitch"
	lock "github.com/promoboxx/go-session-lock/src/lock"
	reflect "reflect"
)

// MockDatabase is a mock of Database interface
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// BumpSession mocks base method
func (m *MockDatabase) BumpSession(arg0 context.Context, arg1 int64) glitch.DataError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BumpSession", arg0, arg1)
	ret0, _ := ret[0].(glitch.DataError)
	return ret0
}

// BumpSession indicates an expected call of BumpSession
func (mr *MockDatabaseMockRecorder) BumpSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BumpSession", reflect.TypeOf((*MockDatabase)(nil).BumpSession), arg0, arg1)
}

// EndSession mocks base method
func (m *MockDatabase) EndSession(arg0 context.Context, arg1 int64) glitch.DataError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EndSession", arg0, arg1)
	ret0, _ := ret[0].(glitch.DataError)
	return ret0
}

// EndSession indicates an expected call of EndSession
func (mr *MockDatabaseMockRecorder) EndSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndSession", reflect.TypeOf((*MockDatabase)(nil).EndSession), arg0, arg1)
}

// FinishTasks mocks base method
func (m *MockDatabase) FinishTasks(arg0 context.Context, arg1 []string) glitch.DataError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinishTasks", arg0, arg1)
	ret0, _ := ret[0].(glitch.DataError)
	return ret0
}

// FinishTasks indicates an expected call of FinishTasks
func (mr *MockDatabaseMockRecorder) FinishTasks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinishTasks", reflect.TypeOf((*MockDatabase)(nil).FinishTasks), arg0, arg1)
}

// GetWork mocks base method
func (m *MockDatabase) GetWork(arg0 context.Context, arg1 int64, arg2 lock.ScanTask) ([]lock.Task, glitch.DataError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWork", arg0, arg1, arg2)
	ret0, _ := ret[0].([]lock.Task)
	ret1, _ := ret[1].(glitch.DataError)
	return ret0, ret1
}

// GetWork indicates an expected call of GetWork
func (mr *MockDatabaseMockRecorder) GetWork(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWork", reflect.TypeOf((*MockDatabase)(nil).GetWork), arg0, arg1, arg2)
}

// StartSession mocks base method
func (m *MockDatabase) StartSession(arg0 context.Context) (int64, glitch.DataError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartSession", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(glitch.DataError)
	return ret0, ret1
}

// StartSession indicates an expected call of StartSession
func (mr *MockDatabaseMockRecorder) StartSession(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSession", reflect.TypeOf((*MockDatabase)(nil).StartSession), arg0)
}

// MockTask is a mock of Task interface
type MockTask struct {
	ctrl     *gomock.Controller
	recorder *MockTaskMockRecorder
}

// MockTaskMockRecorder is the mock recorder for MockTask
type MockTaskMockRecorder struct {
	mock *MockTask
}

// NewMockTask creates a new mock instance
func NewMockTask(ctrl *gomock.Controller) *MockTask {
	mock := &MockTask{ctrl: ctrl}
	mock.recorder = &MockTaskMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTask) EXPECT() *MockTaskMockRecorder {
	return m.recorder
}

// GetID mocks base method
func (m *MockTask) GetID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetID indicates an expected call of GetID
func (mr *MockTaskMockRecorder) GetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockTask)(nil).GetID))
}

// MockScanner is a mock of Scanner interface
type MockScanner struct {
	ctrl     *gomock.Controller
	recorder *MockScannerMockRecorder
}

// MockScannerMockRecorder is the mock recorder for MockScanner
type MockScannerMockRecorder struct {
	mock *MockScanner
}

// NewMockScanner creates a new mock instance
func NewMockScanner(ctrl *gomock.Controller) *MockScanner {
	mock := &MockScanner{ctrl: ctrl}
	mock.recorder = &MockScannerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockScanner) EXPECT() *MockScannerMockRecorder {
	return m.recorder
}

// Scan mocks base method
func (m *MockScanner) Scan(arg0 ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Scan", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Scan indicates an expected call of Scan
func (mr *MockScannerMockRecorder) Scan(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockScanner)(nil).Scan), arg0...)
}
